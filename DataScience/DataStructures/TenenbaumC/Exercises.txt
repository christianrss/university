1.1.1 No texto é feita uma analogia entre o tamanho de uma linha e o número de bits de informação numa string de bits.
De que maneira essa analogia é inadequada?

1.1.2 Determine que tipos de dados de hardware estão disponíveis no computador de sua instalação e que operações 
podem ser executadas sobre eles.

1.1.3 Prove que existe 2^n definições diferentes para n chaves bivalentes. Suponha que queremos ter m definições.
Quantas chaves seriam necessárias?

1.1.4 Interprete as seguintes definições de bits como inteiros positivos binários, como inteiros binários em complemento de dois,
e como inteiros decimais codificados em binário. Se uma definição não puder ser interpretada como um inteiro decimal codificado
em binário, explique por quê.

(a) 10011001
(b) 1001
(c) 000100010001
(d) 01110111
(e) 01010101
(f) 100000010101

1.1.5 Escreva funções em C, add, substract e multiply que leiam duas strings de 0s e 1s representando inteiros não-negativos binários,
e imprima a string representado a soma, a diferença e o produto, respectivamente.

1.1.6 Imagine um computador ternário no qual a unidade básica de memória seja um "trit" (ternary digit) em vez de um bit. Esse trit
pode ter três possíveis definições (0, 1 e 2) em vez de apenas duas (0 e 1). Mostre como os inteiros não-negativos podem ser representados
em notação ternária usando esses trits como um método análogo à notação binária para bits. Existe algum inteiro não-negativo que pode ser 
representado usando notação ternária e trits, mas que não pode ser representado usando notação binária e bits? Existe algum que pode ser
representado usando bits, mas que não pode ser representado usando trits? Por que os computadores binários são mais comuns do que os
computadores ternários?

1.1.7 Escreva um programa C para ler uma string de 0s e 1s representado um inteiro positivo em notação binária e imprima uma string de 0s,
1s e 2s representado o mesmo número em notação ternária (veja o exercício anterior). Escreva outro programa C para ler o número ternário
e imprimir o equivalente em notação binária.

1.1.8 Escreva uma especificação TDA para os números complexos, a + bi, onde abs(a + bi) é sqrt(a^2 + b^2), (a + bi) + (c + di) é (a + c) + (b + d)i, (a + b) * (c + di) é (a * c - b * d) + (a * d + b* c)i e -(a + bi) é (-a) + (-b)i.